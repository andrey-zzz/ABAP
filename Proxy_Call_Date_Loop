*&---------------------------------------------------------------------*
*& Report  Z_GEKOPPELDE_KAARTEN
*&---------------------------------------------------------------------*
*& Author       : Aris van Mazijk (MAZIJKA)
*& Date         : 09-03-2018
*& Description  : ABAP OO report with proxy call in date loop
*& Marker       :
*& Transport    : DEVK9126XX.
*&---------------------------------------------------------------------*
report z_abap_proxy_call.

include z_abap_proxy_call_screen.
include z_abap_proxy_call_class.

*&---------------------------------------------------------------------*
*& AT-SELECTION-SCREEN
*&---------------------------------------------------------------------*
at selection-screen on value-request for pa_file.
  lcl_abap_proxy_call=>select_file( ).

*&---------------------------------------------------------------------*
*& START-OF-SELECTION
*&---------------------------------------------------------------------*
start-of-selection.

  constants cn_max_days type i value 31.

* Input checks.
  if ( pa_local eq abap_true and so_date is initial ) or
     ( so_date-low is not initial and so_date-high is initial ) or
     ( so_date-low is initial and so_date-high is not initial ) or
     ( so_date-high - so_date-low ) > cn_max_days.
    message id 'MO' type 'I' number '001' with 'Geef datumperiode van max. 1 maand op'. "#EC CI_USE_WANTED
  elseif ( pa_local eq abap_true and pa_file is initial ).
    message id 'MO' type 'I' number '001' with 'Geef bestandslocatie & naam op'. "#EC CI_USE_WANTED
  else.
    new lcl_abap_proxy_call( ).
  endif.

*&---------------------------------------------------------------------*
*&  Include           Z_ABAP_PROXY_CALL_CLASS
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Klassedefinitie
*&---------------------------------------------------------------------*
class lcl_abap_proxy_call definition final.

  public section.

    types: begin of ty_dates,
             low  type sy-datum,
             high type sy-datum,
           end of ty_dates,

           dates_tab type standard table of ty_dates.

    methods constructor.
    class-methods select_file.

  private section.

    constants gc_delta      type char5     value 'DELTA'.
    constants gc_full       type char5     value 'FULL'.
    constants gc_object     type balobj_d  value 'ZINTERFACE'.
    constants gc_subobject  type balsubobj value 'ABAP_PROXY_CALL'.
    constants gc_msg_start  type symsgno   value '001'.
    constants gc_msgid      type symsgid   value 'ZMC_ABAP_PROXY_CALL'.
    constants gc_probclass  type balprobcl value '5'.
    constants gc_msg_succes type symsgty   value 'S'.
    constants gc_msg_error  type symsgty   value 'E'.
    constants gc_msg_end    type symsgno   value '002'.

    types:begin of ty_kaart,
            line type string,
          end of ty_kaart.

    data int_query_data type zxi_get_abap_proxy_call__tab.
    data ins_kaart_data type zxi_kaart_out1.
    data inv_aantal     type i.
    data inv_filename   type string.
    data inv_batch      type i.
    data inv_datum      type sy-datum.
    data inv_tijd       type sy-uzeit.
    data inv_methode    type char5.
    data ino_logger      type ref to cl_sbal_logger.

    methods call_iss_service  importing ip_dates  type ty_dates.
    methods data_to_output.
    methods write_local_file.
    methods call_ftp_interface.
    methods process_pakbon.
    methods set_query_data    importing ip_query_data type zxi_get_abap_proxy_call__tab.
    methods get_query_data    exporting ep_query_data type zxi_get_abap_proxy_call__tab.
    methods set_kaart_data    importing ip_kaart_data type zxi_kaart_out1.
    methods get_kaart_data    exporting ep_kaart_data type zxi_kaart_out1.
    methods set_aantal        importing ip_aantal     type string.
    methods get_aantal        exporting ep_aantal     type string.
    methods set_filename      importing ip_name       type string.
    methods get_filename      exporting ep_name       type string.
    methods maak_filename.
    methods get_tabel.
    methods set_tabel.
    methods get_methode       exporting ep_methode type char5.
    methods set_methode       importing ip_methode type char5.
    methods get_batch         exporting ep_batch   type i.
    methods set_batch         importing ip_batch   type i.
    methods get_datum         exporting ep_datum   type sy-datum.
    methods set_datum         importing ip_datum   type sy-datum.
    methods get_tijd          exporting ep_tijd    type sy-uzeit.
    methods set_tijd          importing ip_tijd    type sy-uzeit.
    methods start_log.
    methods end_log.
    methods get_dates         exporting ep_dates  type dates_tab.
    methods log_message       importing ip_msgid  type symsgid   default gc_msgid
                                        ip_msgno  type symsgno
                                        ip_probcl type balprobcl default gc_probclass
                                        ip_msgty  type symsgty   default gc_msg_succes
                                        ip_msgv1  type string    optional
                                        ip_msgv2  type string    optional
                                        ip_msgv3  type string    optional
                                        ip_msgv4  type string    optional.

endclass.

*&---------------------------------------------------------------------*
*&      Klasse implementatie
*&---------------------------------------------------------------------*
class lcl_abap_proxy_call implementation.

  method constructor.

    me->start_log( ).
    me->get_dates( importing ep_dates = data(lt_dates) ).

    loop at lt_dates assigning field-symbol(<ls_dates>).
*     Lees tabelparameters.
      me->get_tabel( ).
*     Query service aanroepen.
      me->call_iss_service( ip_dates = <ls_dates> ).
*     Query data naar output converteren.
      me->data_to_output( ).
*     Lokaal of via FTP wegschrijven?
      if pa_local = abap_true.
        me->write_local_file( ).
      else.
*       Maak bestandsnaam op.
        me->maak_filename( ).
*       Roep databestand interface aan.
        me->call_ftp_interface( ).
*       Roep pakbon interface aan.
        me->process_pakbon( ).
*       Schrijf tabelparameters weg.
        me->set_tabel( ).
      endif.
    endloop.

    me->end_log( ).

  endmethod.

  method call_iss_service.

    data lv_startdate     type string.
    data lv_enddate       type string.

*   SAP PI interface aanroepen (SOAP->FTP).
    do 3 times.
      try.
          data(lo_query_proxy) = new zxi_co_abap_proxy_call_quer( ).
          lo_query_proxy->abap_proxy_call_query_out( exporting output = value #( get_abap_proxy_call_request-begin_date = ip_dates-low
                                                                                 get_abap_proxy_call_request-end_date   = ip_dates-high )
                                                         importing input  = data(ls_response) ).
          call function 'BAPI_TRANSACTION_COMMIT'.
        catch cx_ai_system_fault into data(lx_exception).
          me->log_message( ip_msgno = '018' ip_msgty = gc_msg_error ip_msgv1 = lx_exception->get_text( ) ).
      endtry.

      if ls_response-get_abap_proxy_call_response-coupled_cards-coupled_card is not initial.
        exit.
      endif.
    enddo.

    me->log_message( ip_msgno = '017' ).

    lv_startdate = ip_dates-low.
    lv_enddate = ip_dates-high.

    if ls_response-get_abap_proxy_call_response-coupled_cards-coupled_card is initial.
      me->log_message( ip_msgno = '006' ip_msgty = gc_msg_error ip_msgv1 = lv_startdate ip_msgv2 = lv_enddate ).
    else.
      me->set_query_data( ls_response-get_abap_proxy_call_response-coupled_cards-coupled_card ).
    endif.

  endmethod.

  method data_to_output.

    data lt_kaart_data    type zxi_abap_proxy_call_tab.
    data ls_kaart_output  type zxi_kaart_out1.
    data lv_aantal        type i.

    get_query_data( importing ep_query_data = data(lt_query_data) ).

    clear lv_aantal.

*   Query data naar proxy output datatype converteren.
    loop at lt_query_data assigning field-symbol(<fs_query_data>).
      append initial line to lt_kaart_data assigning field-symbol(<fs_kaart_data>).
      <fs_kaart_data>-card_id  = <fs_query_data>-card_id.
      <fs_kaart_data>-person_id    = <fs_query_data>-person_id.
      <fs_kaart_data>-coupled_date = <fs_query_data>-coupled_date.
      lv_aantal = lv_aantal + 1.
    endloop.

    insert initial line into lt_kaart_data assigning <fs_kaart_data> index 1.
    <fs_kaart_data>-card_id  = |CARD_ID|.
    <fs_kaart_data>-person_id    = |PERSON_ID|.
    <fs_kaart_data>-coupled_date = |KOPPEL_DATUM|.

    ls_kaart_output-kaart_out-kaarten = lt_kaart_data.

    me->set_kaart_data( ip_kaart_data = ls_kaart_output ).
    me->set_aantal( ip_aantal = conv string( lv_aantal ) ).
    me->log_message( ip_msgno = '008' ).

  endmethod.

  method write_local_file.

    data lv_filename type string.
    data lt_kaarten  type table of ty_kaart.

    me->get_kaart_data( importing ep_kaart_data = data(ls_kaart) ).

*   Huidig data in CSV bestand gieten.
    loop at ls_kaart-kaart_out-kaarten assigning field-symbol(<ls_kaart>).
      append initial line to lt_kaarten assigning field-symbol(<ls_line>).
      concatenate <ls_kaart>-card_id <ls_kaart>-person_id <ls_kaart>-coupled_date
      into <ls_line>-line separated by '|'.
    endloop.

    lv_filename = pa_file.

*   CSV bestand naar front-end wegschrijven.
    call function 'GUI_DOWNLOAD'
      exporting
        filename = lv_filename
      tables
        data_tab = lt_kaarten
      exceptions
        others   = 1.

    if sy-subrc <> 0.
      me->log_message( ip_msgno = '003' ip_msgty = gc_msg_error ).
    else.
      me->log_message( ip_msgno = '004' ).
    endif.

  endmethod.

  method call_ftp_interface.

    me->get_kaart_data( importing ep_kaart_data = data(ls_kaart) ).
    me->get_filename( importing ep_name = data(lv_filename) ).

    append initial line to ls_kaart-kaart_out-bestandsnaam
    assigning field-symbol(<fs_bestandsnaam>).
    <fs_bestandsnaam>-filename = lv_filename.

*   SAP PI interface aanroepen (SOAP->FTP).
    try.
        data(lo_kaart_proxy) = new zxi_co_abap_proxy_call_out( ).
        lo_kaart_proxy->abap_proxy_call_out( ls_kaart ).
        call function 'BAPI_TRANSACTION_COMMIT'.
      catch cx_ai_system_fault into data(lx_exception).
        me->log_message( ip_msgno = '011' ip_msgty = gc_msg_error ip_msgv1 = lx_exception->get_text( ) ).
    endtry.

    me->log_message( ip_msgno = '010' ).

  endmethod.

  method process_pakbon.

    data ls_pakbon       type zxi_pakbon_out1.
    data ls_line         type zxi_pakbon_out_lines.
    data lv_batch_txt(5) type c.

    me->get_datum( importing ep_datum = data(lv_datum) ).
    me->get_tijd( importing ep_tijd = data(lv_tijd) ).
    concatenate lv_datum lv_tijd into data(lv_datumtijd).

    me->get_filename( importing ep_name = data(lv_filename) ).
    append initial line to ls_pakbon-pakbon_out-bestandsnaam
    assigning field-symbol(<fs_bestandsnaam>).
    <fs_bestandsnaam>-filename = lv_filename.

    me->get_batch( importing ep_batch = data(lv_batch) ).
    lv_batch_txt = lv_batch.

    call function 'CONVERSION_EXIT_ALPHA_INPUT'
      exporting
        input  = lv_batch_txt
      importing
        output = lv_batch_txt.

    concatenate 'Batchnummer' 'DatumExport' 'AantalBestanden' 'AantalRijen' into ls_line-line
    separated by '|'.
    append ls_line to ls_pakbon-pakbon_out-lines.

    me->get_aantal( importing ep_aantal = data(lv_aantal) ).

    concatenate lv_batch_txt lv_datumtijd '1' lv_aantal into ls_line-line
    separated by '|'.
    append ls_line to ls_pakbon-pakbon_out-lines.

*   SAP PI interface aanroepen (SOAP->FTP).
    try.
        data(lo_pakbon_proxy) = new zxi_co_pakbon_out( ).
        lo_pakbon_proxy->pakbon_out( ls_pakbon ).
        call function 'BAPI_TRANSACTION_COMMIT'.
      catch cx_ai_system_fault into data(lx_exception).
        me->log_message( ip_msgno = '012' ip_msgty = gc_msg_error ip_msgv1 = lx_exception->get_text( ) ).
    endtry.

    me->log_message( ip_msgno = '013' ).

  endmethod.

  method set_query_data.

    int_query_data = ip_query_data.

  endmethod.

  method get_query_data.

    ep_query_data = int_query_data.

  endmethod.

  method select_file.

    data lv_filtmp type dxlpath.

    call function 'F4_DXFILENAME_TOPRECURSION'
      exporting
        i_location_flag = 'P'
      importing
        o_path          = lv_filtmp.

    pa_file = lv_filtmp.

  endmethod.

  method set_kaart_data.

    ins_kaart_data = ip_kaart_data.

  endmethod.

  method get_kaart_data.

    ep_kaart_data = ins_kaart_data.

  endmethod.

  method set_aantal.

    inv_aantal = ip_aantal.

  endmethod.

  method get_aantal.

    ep_aantal = inv_aantal.

  endmethod.

  method set_filename.

    inv_filename = ip_name.

  endmethod.

  method get_filename.

    ep_name = inv_filename.

  endmethod.

  method maak_filename.

    data lv_batch_txt(5) type c.

    me->get_methode( importing ep_methode = data(lv_methode) ).
    me->get_batch( importing ep_batch = data(lv_batch) ).

    lv_batch_txt = lv_batch.

    call function 'CONVERSION_EXIT_ALPHA_INPUT'
      exporting
        input  = lv_batch_txt
      importing
        output = lv_batch_txt.

    concatenate lv_batch_txt '_ISS_ABAP_proxy_call_' lv_methode '_' sy-datum '_'
    sy-uzeit into data(lv_filename).

    me->set_filename( ip_name = lv_filename ).
    me->set_datum( ip_datum = sy-datum ).
    me->set_tijd( ip_tijd = sy-uzeit ).
    me->log_message( ip_msgno = '009' ).

  endmethod.

  method get_tabel.

    select max( batch ), max( datum )
      from zgekoppeld
      into (@data(lv_batch_oud), @data(lv_datum)). "#EC CI_SEL_NESTED "#EC CI_NOWHERE

    if sy-subrc = 0.
      data(lv_batch) = lv_batch_oud + 1.
    else.
      lv_datum = sy-datum.
      lv_batch = 1.
    endif.

    set_batch( ip_batch = lv_batch ).

    me->log_message( ip_msgno = '005' ).
    me->log_message( ip_msgno = '016' ip_msgv1 = conv string( lv_batch_oud )
                                      ip_msgv2 = conv string( lv_datum ) ).

  endmethod.

  method set_tabel.

    data ls_gekoppeld type zgekoppeld.

    get_batch( importing ep_batch = ls_gekoppeld-batch ).
    get_datum( importing ep_datum = ls_gekoppeld-datum ).
    insert into zgekoppeld values ls_gekoppeld. "#EC CI_IMUD_NESTED

    if sy-subrc = 0.
      me->log_message( ip_msgno = '014' ip_msgv1 = conv string( ls_gekoppeld-batch )
                                        ip_msgv2 = conv string( ls_gekoppeld-datum ) ).
    else.
      me->log_message( ip_msgno = '015' ).
    endif.

  endmethod.

  method set_methode.

    inv_methode = ip_methode.

  endmethod.

  method get_methode.

    ep_methode = inv_methode.

  endmethod.

  method set_batch.

    inv_batch = ip_batch.

  endmethod.

  method get_batch.

    ep_batch = inv_batch.

  endmethod.

  method set_datum.

    inv_datum = ip_datum.

  endmethod.

  method get_datum.

    ep_datum = inv_datum.

  endmethod.

  method set_tijd.

    inv_tijd = ip_tijd.

  endmethod.

  method get_tijd.

    ep_tijd = inv_tijd.

  endmethod.

  method start_log.

    if ino_logger is not initial.
      return.
    endif.

    ino_logger = new #( i_category    = gc_object
                       i_subcategory = gc_subobject ).

    if ino_logger is not initial.
      me->log_message( ip_msgno = gc_msg_start ).
    endif.

  endmethod.

  method log_message.

    if ino_logger is initial.
      me->start_log( ).
    endif.

    if ino_logger is not initial.
      ino_logger->if_logger~add_message( i_msgid  = ip_msgid
                                        i_msgno  = ip_msgno
                                        i_probcl = ip_probcl
                                        i_msgty  = ip_msgty
                                        i_msgv1  = ip_msgv1
                                        i_msgv2  = ip_msgv2
                                        i_msgv3  = ip_msgv3
                                        i_msgv4  = ip_msgv4 ).
    endif.

  endmethod.

  method end_log.

    if ino_logger is not initial.
      me->log_message( ip_msgno = gc_msg_end ).
      ino_logger->if_logger~finalize( ).
    endif.

  endmethod.

  method get_dates.

    data lv_enddate   type sy-datum.
    data lv_startdate type sy-datum value '20120101'.

    free ep_dates.

*   Bepaal of het een periode betreft of de hele mikmak vanaf 01.01.2012.
    if so_date is not initial.
      append initial line to ep_dates assigning field-symbol(<ls_date>).
      <ls_date>-low  = so_date-low.
      <ls_date>-high = so_date-high.
      set_methode( ip_methode = gc_delta ).
    else.
      while lv_startdate le sy-datum.

        call function 'SN_LAST_DAY_OF_MONTH'
          exporting
            day_in       = lv_startdate
          importing
            end_of_month = lv_enddate.

        append initial line to ep_dates assigning field-symbol(<ls_dates>).
        <ls_dates>-high = lv_enddate.
        <ls_dates>-low  = lv_startdate.

        lv_startdate = lv_enddate + 1.
      endwhile.
      set_methode( ip_methode = gc_full ).
    endif.

  endmethod.

endclass.

*&---------------------------------------------------------------------*
*&  Include           Z_ABAP_PROXY_CALL_SCREEN
*&---------------------------------------------------------------------*
selection-screen begin of block b1.                   "#EC CI_USE_WANTED
select-options: so_date for sy-datum.                 "#EC CI_USE_WANTED
selection-screen skip.                                "#EC CI_USE_WANTED
parameters: pa_local radiobutton group r1,             "#EC CI_USE_WANTED
            pa_file  type dxfilename,                  "#EC CI_USE_WANTED
            pa_ftp   radiobutton group r1 default 'X'. "#EC CI_USE_WANTED
selection-screen end of block b1.                     "#EC CI_USE_WANTED
